{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "fidosynapsedev"
		},
		"fidosynapsedev-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'fidosynapsedev-WorkspaceDefaultSqlServer'"
		},
		"fidosynapsedev-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://fidosadev.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Load_Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "To load partitioned and non partitioned tables.",
				"activities": [
					{
						"name": "Read FilesToLoad JSON",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "FilesToLoadJson",
								"type": "DatasetReference",
								"parameters": {
									"FilePath": {
										"value": "@trim(pipeline().parameters.FilePath)",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach-To filter tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Read FilesToLoad JSON",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Read FilesToLoad JSON').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition- For Partitioned Tables",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(item().is_partition,'1'),equals(item().format,'dynamic'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Execute Pipeline - Partition",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Partition_Pipeline",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TableName": {
															"value": "@trim(item().table_name)",
															"type": "Expression"
														},
														"PartitionKey": {
															"value": "@trim(string(item().partition))",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If Condition - For Static Tables",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().format,'static')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Execute Pipeline - Load tsv files to Table",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "non_partition_load_dim_tsv",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"file_name": {
															"value": "@trim(item().table_name)",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "If Condition-For Non-Partitioned Tables",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(equals(item().is_partition,'0'),equals(item().format,'dynamic'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Execute Pipeline - Non Partition",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "NonPartition_Pipeline",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"TableName": {
															"value": "@trim(item().table_name)",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Log Stats for Failure - Lookup",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Read FilesToLoad JSON",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Lookup - Read TablesToLoad JSON",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@{activity('Read FilesToLoad JSON').output.durationInQueue.integrationRuntimeQueue}\n",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": null,
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@{activity('Read FilesToLoad JSON').error.errorCode}\n\n",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorDescription": {
									"value": {
										"value": "@{activity('Read FilesToLoad JSON').error.message}\n\n",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "String"
								},
								"Execution_Status": {
									"value": "Failed",
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@concat(activity('Read FilesToLoad JSON').error.message, 'failureType:', activity('Read FilesToLoad JSON').error.failureType)",
										"type": "Expression"
									},
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": null,
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Success - Lookup",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Read FilesToLoad JSON",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Lookup - Read TablesToLoad JSON",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@{activity('Read FilesToLoad JSON').output.durationInQueue.integrationRuntimeQueue}\n",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": {
										"value": "@activity('Read FilesToLoad JSON').output.count",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": null,
									"type": "String"
								},
								"ErrorCode": {
									"value": null,
									"type": "String"
								},
								"ErrorDescription": {
									"value": null,
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": null,
									"type": "String"
								},
								"Execution_Status": {
									"value": "Success",
									"type": "String"
								},
								"FailureType": {
									"value": null,
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": null,
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					}
				],
				"parameters": {
					"FilePath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sql Load"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/FilesToLoadJson')]",
				"[concat(variables('workspaceId'), '/sqlPools/red')]",
				"[concat(variables('workspaceId'), '/pipelines/Partition_Pipeline')]",
				"[concat(variables('workspaceId'), '/pipelines/non_partition_load_dim_tsv')]",
				"[concat(variables('workspaceId'), '/pipelines/NonPartition_Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NonPartition_Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Create Stage Table - Non partitioned",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_create_stage_table_nonpartition]",
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "@trim(pipeline().parameters.TableName)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Rename Tables",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Stage Table NP",
								"dependencyConditions": [
									"Skipped",
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_rename_table_nonpartition]",
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "@trim(pipeline().parameters.TableName)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Load Stage Table NP",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Create Stage Table - Non partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load_Data_DFT_V1",
								"type": "DataFlowReference",
								"parameters": {
									"FileName": {
										"value": "'@{trim(pipeline().parameters.TableName)}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadFilesFromStorageAcoount": {},
									"LoadDataIntoTable": {
										"TableName": {
											"value": "@concat('staging_',trim(pipeline().parameters.TableName),'_nonpartition_out')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "fidosynapsedev-WorkspaceDefaultStorage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "red/dft_staging"
							},
							"compute": {
								"coreCount": 16,
								"computeType": "MemoryOptimized"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Log Stats for Success - Create Stage Table NP",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create Stage Table - Non partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Create Stage Table - Non Partitioned",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@activity('Create Stage Table - Non partitioned').output.durationInQueue.integrationRuntimeQueue",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": {
										"value": "@activity('Create Stage Table - Non partitioned').output.executionDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": null,
									"type": "String"
								},
								"ErrorDescription": {
									"value": null,
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": null,
									"type": "String"
								},
								"Execution_Status": {
									"value": "Success",
									"type": "String"
								},
								"FailureType": {
									"value": null,
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Failure - Create Stage Table NP",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create Stage Table - Non partitioned",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": {
										"value": "Create Stage Table - Non Partitioned",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@activity('Create Stage Table - Non partitioned').output.durationInQueue.integrationRuntimeQueue",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": {
										"value": "@activity('Create Stage Table - Non partitioned').output.executionDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@activity('Create Stage Table - Non partitioned').error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorDescription": {
									"value": {
										"value": "@activity('Create Stage Table - Non partitioned').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "String"
								},
								"Execution_Status": {
									"value": "Failed",
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@concat(activity('Create Stage Table - Non partitioned').error.message,' failureType: ',activity('Create Stage Table - Non partitioned').error.failureType)",
										"type": "Expression"
									},
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Failure - DataFlow",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Stage Table NP",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Load Stage Table - Non Partitioned",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": null,
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@activity('Load Stage Table NP').error.failureType",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorDescription": {
									"value": {
										"value": "@activity('Load Stage Table NP').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "String"
								},
								"Execution_Status": {
									"value": "Failed",
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@concat(activity('Load Stage Table NP').error.message, ' failureType: ', activity('Load Stage Table NP').error.failureType)",
										"type": "Expression"
									},
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Success - Dataflow",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Load Stage Table NP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Load Stage Table - Non Partitioned",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": {
										"value": "@activity('Load Stage Table NP').output.runStatus.metrics.LoadDataIntoTable.sinkProcessingTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": {
										"value": "@activity('Load Stage Table NP').output.runStatus.metrics.LoadDataIntoTable.sources.ReadFilesFromStorageAcoount.rowsRead",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": {
										"value": "@activity('Load Stage Table NP').output.runStatus.computeAcquisitionDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": null,
									"type": "String"
								},
								"ErrorDescription": {
									"value": null,
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": null,
									"type": "String"
								},
								"Execution_Status": {
									"value": "Success",
									"type": "String"
								},
								"FailureType": {
									"value": null,
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": {
										"value": "@activity('Load Stage Table NP').output.runStatus.metrics.LoadDataIntoTable.rowsWritten",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Success - Rename Tables",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Rename Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Rename Table - Non Partitioned",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@activity('Rename Tables').output.durationInQueue.integrationRuntimeQueue",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": {
										"value": "@activity('Rename Tables').output.executionDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": null,
									"type": "String"
								},
								"ErrorDescription": {
									"value": null,
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": null,
									"type": "String"
								},
								"Execution_Status": {
									"value": "Success",
									"type": "String"
								},
								"FailureType": {
									"value": null,
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Failure - Rename Tables",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Rename Tables",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Rename Table - Non Partitioned",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@activity('Rename Tables').output.durationInQueue.integrationRuntimeQueue",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": {
										"value": "@activity('Rename Tables').output.executionDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@activity('Rename Tables').error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorDescription": {
									"value": {
										"value": "@activity('Rename Tables').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "String"
								},
								"Execution_Status": {
									"value": "Failed",
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@concat(activity('Rename Tables').error.message, ' failureType: ', activity('Rename Tables').error.failureType)",
										"type": "Expression"
									},
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					}
				],
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sql Load"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/red')]",
				"[concat(variables('workspaceId'), '/dataflows/Load_Data_DFT_V1')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/fidosynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Partition_Pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Create Stage Table",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create New Fact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_create_stage_table_partition]",
							"storedProcedureParameters": {
								"partition_key": {
									"value": {
										"value": "@trim(pipeline().parameters.PartitionKey)",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@trim(pipeline().parameters.TableName)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Create New Fact",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_create_new_fact_partition]",
							"storedProcedureParameters": {
								"partition_key_list": {
									"value": {
										"value": "@trim(pipeline().parameters.PartitionKey)",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@trim(pipeline().parameters.TableName)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "String to Array - PartitionKey",
						"description": "To convert datatype of PartitionKey into array from string",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Create Stage Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "PartitionKeyDFT",
							"value": {
								"value": "@split(trim(pipeline().parameters.PartitionKey),',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach - Load Data into Stage Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "String to Array - PartitionKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('PartitionKeyDFT')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Load Delta files to Stage Table",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Load_Data_DFT_V1",
											"type": "DataFlowReference",
											"parameters": {
												"FileName": {
													"value": "'@{concat(trim(pipeline().parameters.TableName),'/',trim(item()))}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"ReadFilesFromStorageAcoount": {},
												"LoadDataIntoTable": {
													"TableName": {
														"value": "@concat('staging_',pipeline().parameters.TableName,'_partition_out')\n",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {
											"linkedService": {
												"referenceName": "fidosynapsedev-WorkspaceDefaultStorage",
												"type": "LinkedServiceReference"
											},
											"folderPath": "red/dft_staging"
										},
										"compute": {
											"coreCount": 16,
											"computeType": "MemoryOptimized"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Log Stats for Success - Dataflow",
									"type": "SqlPoolStoredProcedure",
									"dependsOn": [
										{
											"activity": "Load Delta files to Stage Table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"sqlPool": {
										"referenceName": "red",
										"type": "SqlPoolReference"
									},
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_update_load_stats]",
										"storedProcedureParameters": {
											"Activity": {
												"value": "Load Stage Table - Partitioned",
												"type": "String"
											},
											"Activity_End_Time": {
												"value": null,
												"type": "String"
											},
											"Activity_queuingDuration_in_secs": {
												"value": null,
												"type": "String"
											},
											"Activity_Start_Time": {
												"value": null,
												"type": "String"
											},
											"Activity_transferDuration_in_secs": {
												"value": {
													"value": "@activity('Load Delta files to Stage Table').output.runStatus.metrics.LoadDataIntoTable.sinkProcessingTime",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFactory_Name": {
												"value": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataRead": {
												"value": {
													"value": "@activity('Load Delta files to Stage Table').output.runStatus.metrics.LoadDataIntoTable.sources.ReadFilesFromStorageAcoount.rowsRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Duration_in_secs": {
												"value": {
													"value": "@activity('Load Delta files to Stage Table').output.runStatus.computeAcquisitionDuration",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorCode": {
												"value": null,
												"type": "String"
											},
											"ErrorDescription": {
												"value": null,
												"type": "String"
											},
											"ErrorLoggedTime": {
												"value": null,
												"type": "String"
											},
											"Execution_Status": {
												"value": "Success",
												"type": "String"
											},
											"FailureType": {
												"value": null,
												"type": "String"
											},
											"No_ParallelCopies": {
												"value": null,
												"type": "Int32"
											},
											"Pipeline_Name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsCopied": {
												"value": {
													"value": "@activity('Load Delta files to Stage Table').output.runStatus.metrics.LoadDataIntoTable.rowsWritten",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Table": {
												"value": {
													"value": "@concat(pipeline().parameters.TableName, '-', item())",
													"type": "Expression"
												},
												"type": "String"
											},
											"TriggerId": {
												"value": {
													"value": "@pipeline().TriggerId",
													"type": "Expression"
												},
												"type": "String"
											},
											"TriggerName": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"TriggerTime": {
												"value": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"type": "String"
											},
											"TriggerType": {
												"value": {
													"value": "@pipeline().TriggerType",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									}
								},
								{
									"name": "Log Stats for Failure - Dataflow",
									"type": "SqlPoolStoredProcedure",
									"dependsOn": [
										{
											"activity": "Load Delta files to Stage Table",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"sqlPool": {
										"referenceName": "red",
										"type": "SqlPoolReference"
									},
									"typeProperties": {
										"storedProcedureName": "[dbo].[sp_update_load_stats]",
										"storedProcedureParameters": {
											"Activity": {
												"value": "Load Stage Table - Partitioned",
												"type": "String"
											},
											"Activity_End_Time": {
												"value": null,
												"type": "String"
											},
											"Activity_queuingDuration_in_secs": {
												"value": null,
												"type": "String"
											},
											"Activity_Start_Time": {
												"value": null,
												"type": "String"
											},
											"Activity_transferDuration_in_secs": {
												"value": null,
												"type": "String"
											},
											"DataFactory_Name": {
												"value": {
													"value": "@pipeline().DataFactory",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataRead": {
												"value": null,
												"type": "Int32"
											},
											"Duration_in_secs": {
												"value": null,
												"type": "String"
											},
											"ErrorCode": {
												"value": {
													"value": "@activity('Load Delta files to Stage Table').error.failureType",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorDescription": {
												"value": {
													"value": "@activity('Load Delta files to Stage Table').error.message",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorLoggedTime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "String"
											},
											"Execution_Status": {
												"value": "Failed",
												"type": "String"
											},
											"FailureType": {
												"value": {
													"value": "@concat(activity('Load Delta files to Stage Table').error.message,' failureType: ', activity('Load Delta files to Stage Table').error.failureType)",
													"type": "Expression"
												},
												"type": "String"
											},
											"No_ParallelCopies": {
												"value": null,
												"type": "Int32"
											},
											"Pipeline_Name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsCopied": {
												"value": null,
												"type": "String"
											},
											"RunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Table": {
												"value": {
													"value": "@concat(pipeline().parameters.TableName, '-', item())",
													"type": "Expression"
												},
												"type": "String"
											},
											"TriggerId": {
												"value": {
													"value": "@pipeline().TriggerId",
													"type": "Expression"
												},
												"type": "String"
											},
											"TriggerName": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"TriggerTime": {
												"value": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"type": "String"
											},
											"TriggerType": {
												"value": {
													"value": "@pipeline().TriggerType",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Switch Partition into New fact",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach - Load Data into Stage Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_switch_partition_from_stage]",
							"storedProcedureParameters": {
								"partition_key": {
									"value": {
										"value": "@trim(pipeline().parameters.PartitionKey)",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@trim(pipeline().parameters.TableName)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Rename tables",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Switch Partition into New fact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_rename_table_partition]",
							"storedProcedureParameters": {
								"TableName": {
									"value": {
										"value": "@trim(pipeline().parameters.TableName)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Failure - Create New Fact",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create New Fact",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Create New Fact - Partitioned",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@activity('Create New Fact').output.durationInQueue.integrationRuntimeQueue",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": {
										"value": "@activity('Create New Fact').output.executionDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@activity('Create New Fact').error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorDescription": {
									"value": {
										"value": "@activity('Create New Fact').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "String"
								},
								"Execution_Status": {
									"value": "Failed",
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@concat(activity('Create New Fact').error.message,' failureType: ',activity('Create New Fact').error.failureType)",
										"type": "Expression"
									},
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Success - Create New Fact",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create New Fact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Create New Fact - Partitioned",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@activity('Create New Fact').output.durationInQueue.integrationRuntimeQueue",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": {
										"value": "@activity('Create New Fact').output.executionDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": null,
									"type": "String"
								},
								"ErrorDescription": {
									"value": null,
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": null,
									"type": "String"
								},
								"Execution_Status": {
									"value": "Success",
									"type": "String"
								},
								"FailureType": {
									"value": null,
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Success - Create Stage Table",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create Stage Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Create New Fact - Partitioned",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@activity('Create Stage Table').output.durationInQueue.integrationRuntimeQueue",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": {
										"value": "@activity('Create Stage Table').output.executionDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": null,
									"type": "String"
								},
								"ErrorDescription": {
									"value": null,
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": null,
									"type": "String"
								},
								"Execution_Status": {
									"value": "Success",
									"type": "String"
								},
								"FailureType": {
									"value": null,
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Failure - Create Stage Table",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create Stage Table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Create Stage Table - Partitioned",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@activity('Create Stage Table').output.durationInQueue.integrationRuntimeQueue",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": {
										"value": "@activity('Create Stage Table').output.executionDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@activity('Create Stage Table').error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorDescription": {
									"value": {
										"value": "@activity('Create Stage Table').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "String"
								},
								"Execution_Status": {
									"value": "Failed",
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@concat(activity('Create Stage Table').error.message,' failureType: ',activity('Create Stage Table').error.failureType)",
										"type": "Expression"
									},
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Success - Switch Partition",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Switch Partition into New fact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Switch Partition Into New Fact - Partitioned",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@activity('Switch Partition into New fact').output.durationInQueue.integrationRuntimeQueue",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": {
										"value": "@activity('Switch Partition into New fact').output.executionDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": null,
									"type": "String"
								},
								"ErrorDescription": {
									"value": null,
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": null,
									"type": "String"
								},
								"Execution_Status": {
									"value": "Success",
									"type": "String"
								},
								"FailureType": {
									"value": null,
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Failure - Switch Partition",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Switch Partition into New fact",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Switch Partition Into New Fact - Partitioned",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@activity('Switch Partition into New fact').output.durationInQueue.integrationRuntimeQueue",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": {
										"value": "@activity('Switch Partition into New fact').output.executionDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@activity('Switch Partition into New fact').error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorDescription": {
									"value": {
										"value": "@activity('Switch Partition into New fact').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "String"
								},
								"Execution_Status": {
									"value": "Failed",
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@concat(activity('Switch Partition into New fact').error.message,' failureType: ',activity('Switch Partition into New fact').error.failureType)",
										"type": "Expression"
									},
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Success - Rename Tables",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Rename tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Rename Tables - Partitioned",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@activity('Rename tables').output.durationInQueue.integrationRuntimeQueue",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": {
										"value": "@activity('Rename tables').output.executionDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": null,
									"type": "String"
								},
								"ErrorDescription": {
									"value": null,
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": null,
									"type": "String"
								},
								"Execution_Status": {
									"value": "Success",
									"type": "String"
								},
								"FailureType": {
									"value": null,
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					},
					{
						"name": "Log Stats for Failure - Rename Tables",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "Rename tables",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "red",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[sp_update_load_stats]",
							"storedProcedureParameters": {
								"Activity": {
									"value": "Rename Table - Partitioned",
									"type": "String"
								},
								"Activity_End_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_queuingDuration_in_secs": {
									"value": {
										"value": "@activity('Rename tables').output.durationInQueue.integrationRuntimeQueue",
										"type": "Expression"
									},
									"type": "String"
								},
								"Activity_Start_Time": {
									"value": null,
									"type": "String"
								},
								"Activity_transferDuration_in_secs": {
									"value": null,
									"type": "String"
								},
								"DataFactory_Name": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataRead": {
									"value": null,
									"type": "Int32"
								},
								"Duration_in_secs": {
									"value": {
										"value": "@activity('Rename tables').output.executionDuration",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorCode": {
									"value": {
										"value": "@activity('Rename tables').error.errorCode",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorDescription": {
									"value": {
										"value": "@activity('Rename tables').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"ErrorLoggedTime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "String"
								},
								"Execution_Status": {
									"value": "Failed",
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@concat(activity('Rename tables').error.message,' failureType: ',activity('Rename tables').error.failureType)",
										"type": "Expression"
									},
									"type": "String"
								},
								"No_ParallelCopies": {
									"value": null,
									"type": "Int32"
								},
								"Pipeline_Name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"rowsCopied": {
									"value": null,
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"Table": {
									"value": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerId": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"TriggerType": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					}
				],
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"PartitionKey": {
						"type": "string"
					}
				},
				"variables": {
					"PartitionKeyDFT": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Sql Load"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/red')]",
				"[concat(variables('workspaceId'), '/dataflows/Load_Data_DFT_V1')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/fidosynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/non_partition_load_dim_tsv')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Load tsv file to Table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": false,
							"parallelCopies": 5
						},
						"inputs": [
							{
								"referenceName": "DelimitedText",
								"type": "DatasetReference",
								"parameters": {
									"file_name": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "red_synapse_db",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@trim(pipeline().parameters.file_name)",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sql Load"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-23T22:44:09Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DelimitedText')]",
				"[concat(variables('workspaceId'), '/datasets/red_synapse_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fidosynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(trim(dataset().file_name),'.tsv')",
							"type": "Expression"
						},
						"folderPath": "dm",
						"fileSystem": "red"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/fidosynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FilesToLoadJson')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fidosynapsedev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FilePath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "filestoload.json",
						"folderPath": {
							"value": "@concat('sqlload/',dataset().FilePath)",
							"type": "Expression"
						},
						"fileSystem": "red"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/fidosynapsedev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/red_synapse_db')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "fidosynapsedev-WorkspaceDefaultSqlServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"DBName": "red"
					}
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/fidosynapsedev-WorkspaceDefaultSqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fidosynapsedev-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('fidosynapsedev-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fidosynapsedev-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('fidosynapsedev-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load_Data_DFT_V1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "To test out data flow in Synapse for Delta files. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "fidosynapsedev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "ReadFilesFromStorageAcoount"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "red_synapse_db",
								"type": "DatasetReference"
							},
							"name": "LoadDataIntoTable"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tFileName as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'red',\n\tfolderPath: (concat('dm/',$FileName))) ~> ReadFilesFromStorageAcoount\nReadFilesFromStorageAcoount sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> LoadDataIntoTable"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/fidosynapsedev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/datasets/red_synapse_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SystemAssigned",
				"typeProperties": {}
			},
			"dependsOn": []
		},		
		{
			"name": "[concat(parameters('workspaceName'), '/dim_master_recon_application')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "python",
				"jobProperties": {
					"name": "dim_master_recon_application",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/dim/dim_master_recon_application.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dim_master_recon_application_status')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "python",
				"jobProperties": {
					"name": "dim_master_recon_application_status",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/dim/dim_master_recon_application_status.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dim_master_recon_event_code')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "python",
				"jobProperties": {
					"name": "dim_master_recon_event_code",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/dim/dim_master_recon_event_code.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dim_master_recon_lifecycle')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "python",
				"jobProperties": {
					"name": "dim_master_recon_lifecycle",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/dim/dim_master_recon_lifecycle.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dim_master_recon_mbs_billing_status')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "scala",
				"jobProperties": {
					"name": "dim_master_recon_mbs_billing_status",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/dim/dim_master_recon_mbs_billing_status.py.py",
					"className": "dim_master_recon_mbs_billing_status",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dim_master_recon_roxie_order_status')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "python",
				"jobProperties": {
					"name": "dim_master_recon_roxie_order_status",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/dim/dim_master_recon_roxie_order_status.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dim_master_recon_roxie_processing_status')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "python",
				"jobProperties": {
					"name": "dim_master_recon_roxie_processing_status",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/dim/dim_master_recon_roxie_processing_status.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dim_master_recon_status')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "python",
				"jobProperties": {
					"name": "dim_master_recon_status",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/dim/dim_master_recon_status.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dim_master_recon_system')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "python",
				"jobProperties": {
					"name": "dim_master_recon_system",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/dim/dim_master_recon_system.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dim_master_recon_transaction_mode')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "python",
				"jobProperties": {
					"name": "dim_master_recon_transaction_mode",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/dim/dim_master_recon_transaction_mode.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fact_master_recon_detail_vin')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "python",
				"jobProperties": {
					"name": "fact_master_recon_detail_vin",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/fact_master_recon_vin/fact_master_recon_detail_main.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "6",
						"spark.dynamicAllocation.maxExecutors": "6"
					},
					"args": [
						"--input_date",
						"20210706"
					],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 6
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/stage_master_recon_detail_vin')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "python",
				"jobProperties": {
					"name": "stage_master_recon_detail_vin",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/stage_master_recon_vin/stage_master_recon_vin_logs_main.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "4",
						"spark.dynamicAllocation.maxExecutors": "4"
					},
					"args": [
						"--inputdate",
						"20210625"
					],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 4
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/stage_master_recon_vin_distinct_guids')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "python",
				"jobProperties": {
					"name": "stage_master_recon_vin_distinct_guids",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/stage_master_recon_vin/stage_master_recon_vin_distinct_guids.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "4",
						"spark.dynamicAllocation.maxExecutors": "4"
					},
					"args": [],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 4
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/stage_parse_centralized_logs')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"referenceName": "fido4core",
					"type": "BigDataPoolReference"
				},
				"requiredSparkVersion": "2.4",
				"language": "python",
				"jobProperties": {
					"name": "stage_parse_centralized_logs",
					"file": "abfss://red@rsgue2fidodsta01.dfs.core.windows.net/scripts/etl/stage_master_recon_vin/stage_parse_centralized_logs.py",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "4",
						"spark.dynamicAllocation.maxExecutors": "4"
					},
					"args": [
						"--input_date",
						"20210615"
					],
					"jars": [],
					"files": [],
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 4
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/red')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_LATIN1_GENERAL_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"restorePointInTime": "0001-01-01T00:00:00",
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus2"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sql--fidosynapsedev')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/29da7f08-209a-465d-bc97-c3ee3ab0e1db/resourceGroups/shared-fido-dev-eastus2/providers/Microsoft.Synapse/workspaces/fidosynapsedev",
				"groupId": "sql",
				"fqdns": [
					"fidosynapsedev.2ce05439-0aae-47c9-b857-e2d78bc02bbe.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sqlOnDemand--fidosynapsedev')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/29da7f08-209a-465d-bc97-c3ee3ab0e1db/resourceGroups/shared-fido-dev-eastus2/providers/Microsoft.Synapse/workspaces/fidosynapsedev",
				"groupId": "sqlOnDemand",
				"fqdns": [
					"fidosynapsedev-ondemand.2ce05439-0aae-47c9-b857-e2d78bc02bbe.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/build_master_recon')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "stage_parse_centralized_logs",
						"type": "SparkJob",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "stage_parse_centralized_logs",
								"type": "SparkJobDefinitionReference"
							},
							"args": [
								"--input_date",
								"@pipeline().parameters.input_name"
							]
						}
					},
					{
						"name": "stage_master_recon_detail_vin",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "stage_parse_centralized_logs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "stage_master_recon_detail_vin",
								"type": "SparkJobDefinitionReference"
							},
							"args": [
								"--input_date",
								"@pipeline().parameters.input_name"
							]
						}
					},
					{
						"name": "stage_master_recon_vin_distinct_guids",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "stage_master_recon_detail_vin",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "stage_master_recon_vin_distinct_guids",
								"type": "SparkJobDefinitionReference"
							}
						}
					},
					{
						"name": "dim_master_recon_application",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "stage_master_recon_vin_distinct_guids",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "dim_master_recon_application",
								"type": "SparkJobDefinitionReference"
							}
						}
					},
					{
						"name": "dim_master_recon_roxie_order_status",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "stage_master_recon_vin_distinct_guids",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "dim_master_recon_roxie_order_status",
								"type": "SparkJobDefinitionReference"
							}
						}
					},
					{
						"name": "dim_master_recon_mbs_billing_status",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "stage_master_recon_vin_distinct_guids",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "dim_master_recon_mbs_billing_status",
								"type": "SparkJobDefinitionReference"
							}
						}
					},
					{
						"name": "dim_master_recon_lifecycle",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "stage_master_recon_vin_distinct_guids",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "dim_master_recon_lifecycle",
								"type": "SparkJobDefinitionReference"
							}
						}
					},
					{
						"name": "dim_master_recon_event_code",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "stage_master_recon_vin_distinct_guids",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "dim_master_recon_event_code",
								"type": "SparkJobDefinitionReference"
							}
						}
					},
					{
						"name": "dim_master_recon_application_status",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "stage_master_recon_vin_distinct_guids",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "dim_master_recon_application_status",
								"type": "SparkJobDefinitionReference"
							}
						}
					},
					{
						"name": "dim_master_recon_transaction_mode",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "stage_master_recon_vin_distinct_guids",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "dim_master_recon_transaction_mode",
								"type": "SparkJobDefinitionReference"
							}
						}
					},
					{
						"name": "dim_master_recon_system",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "stage_master_recon_vin_distinct_guids",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "dim_master_recon_system",
								"type": "SparkJobDefinitionReference"
							}
						}
					},
					{
						"name": "dim_master_recon_status",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "stage_master_recon_vin_distinct_guids",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "dim_master_recon_status",
								"type": "SparkJobDefinitionReference"
							}
						}
					},
					{
						"name": "dim_master_recon_roxie_processing_status",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "stage_master_recon_vin_distinct_guids",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "dim_master_recon_roxie_processing_status",
								"type": "SparkJobDefinitionReference"
							}
						}
					},
					{
						"name": "fact_master_recon_detail_vin",
						"type": "SparkJob",
						"dependsOn": [
							{
								"activity": "dim_master_recon_application",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_master_recon_application_status",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_master_recon_event_code",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_master_recon_lifecycle",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_master_recon_mbs_billing_status",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_master_recon_roxie_order_status",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_master_recon_roxie_processing_status",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_master_recon_status",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_master_recon_system",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "dim_master_recon_transaction_mode",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"sparkJob": {
								"referenceName": "fact_master_recon_detail_vin",
								"type": "SparkJobDefinitionReference"
							},
							"args": [
								"--input_date",
								"@pipeline().parameters.input_name"
							]
						}
					}
				],
				"parameters": {
					"input_name": {
						"type": "string",
						"defaultValue": "20210707"
					}
				},
				"folder": {
					"name": "Spark Build"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/stage_parse_centralized_logs')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/stage_master_recon_detail_vin')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/stage_master_recon_vin_distinct_guids')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/dim_master_recon_application')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/dim_master_recon_roxie_order_status')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/dim_master_recon_mbs_billing_status')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/dim_master_recon_lifecycle')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/dim_master_recon_event_code')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/dim_master_recon_application_status')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/dim_master_recon_transaction_mode')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/dim_master_recon_system')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/dim_master_recon_status')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/dim_master_recon_roxie_processing_status')]",
				"[concat(variables('workspaceId'), '/sparkJobDefinitions/fact_master_recon_detail_vin')]"
			]
		}
	]
}
